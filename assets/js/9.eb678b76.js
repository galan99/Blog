(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{276:function(e,l,t){"use strict";t.r(l);var v=t(13),_=Object(v.a)({},(function(){var e=this,l=e._self._c;return l("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[l("h1",{attrs:{id:"数据结构与算法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法"}},[e._v("#")]),e._v(" 数据结构与算法")]),e._v(" "),l("ul",[l("li",[e._v("时间复杂度如何计算？")]),e._v(" "),l("li",[e._v("写完一个算法之后怎样判断哪个更快？\n")])]),e._v(" "),l("h2",{attrs:{id:"树"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[e._v("#")]),e._v(" 树")]),e._v(" "),l("ul",[l("li",[e._v("如何存储一颗树？")]),e._v(" "),l("li",[e._v("先序 中序 后序")]),e._v(" "),l("li",[e._v("哈夫曼树是什么？\n")]),e._v(" "),l("li",[e._v("为什么二叉树这么重要？而不是三叉树 四叉树？\n")]),e._v(" "),l("li",[e._v("数组，链表，二叉树的特点\n")]),e._v(" "),l("li",[e._v("什么是红黑树？\n")])]),e._v(" "),l("h2",{attrs:{id:"图"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#图"}},[e._v("#")]),e._v(" 图")]),e._v(" "),l("ul",[l("li",[e._v("如何存储一个图？")]),e._v(" "),l("li",[e._v("广度优先和深度优先")]),e._v(" "),l("li",[e._v("最小生成树是什么？")]),e._v(" "),l("li",[e._v("最短路径是什么？\n")]),e._v(" "),l("li",[e._v("关键路径是什么？")])]),e._v(" "),l("h2",{attrs:{id:"排序"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[e._v("#")]),e._v(" 排序")]),e._v(" "),l("ul",[l("li",[e._v("冒泡排序")]),e._v(" "),l("li",[e._v("快速排序")]),e._v(" "),l("li",[e._v("折半排序")])]),e._v(" "),l("h2",{attrs:{id:"查找"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#查找"}},[e._v("#")]),e._v(" 查找")]),e._v(" "),l("ul",[l("li",[e._v("二分查找")])]),e._v(" "),l("h2",{attrs:{id:"算法题"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#算法题"}},[e._v("#")]),e._v(" 算法题")]),e._v(" "),l("ul",[l("li",[e._v("字符串\n"),l("ul",[l("li",[e._v("反转一个字符串\n")]),e._v(" "),l("li",[e._v("js 如何全部替代一个子串为另一个子串?\n")])])]),e._v(" "),l("li",[e._v("数组\n"),l("ul",[l("li",[e._v("创建一个数组大小为 100，每个值都为 0 的数组 ✔️\n")]),e._v(" "),l("li",[e._v("数组拉平 ✔️")]),e._v(" "),l("li",[e._v("数组去重 ✔️\n")]),e._v(" "),l("li",[e._v("旋转数组\n")]),e._v(" "),l("li",[e._v("实现一个数组洗牌函数 shuffle\n")])])]),e._v(" "),l("li",[e._v("function\n"),l("ul",[l("li",[e._v("柯里化 ✔️\n"),l("ul",[l("li",[e._v("定参，add(1)(2)(3)或add(1,2)(3) ✔️")]),e._v(" "),l("li",[e._v("不定参，无限累加 ✔️\n")])])]),e._v(" "),l("li",[e._v("实现一个new ✔️")]),e._v(" "),l("li",[e._v("实现instanceof")]),e._v(" "),l("li",[e._v("写一个bind ✔️")]),e._v(" "),l("li",[e._v("写一个sortbind\n")]),e._v(" "),l("li",[e._v("写一个call ✔️")]),e._v(" "),l("li",[e._v("写一个flatMap\n")]),e._v(" "),l("li",[e._v("用ES5实现继承 ✔️\n")])])]),e._v(" "),l("li",[e._v("lodash\n"),l("ul",[l("li",[e._v("深拷贝和浅拷贝 ✔️\n"),l("ul",[l("li",[e._v("用JSON.parse(JSON.stringify())有什么弊端？ ✔️\n")])])]),e._v(" "),l("li",[e._v("节流和防抖函数 ✔️\n")]),e._v(" "),l("li",[e._v("实现一个 once 函数，记忆返回结果只执行一次 ✔️")])]),e._v(" "),l("div",{staticClass:"custom-block tip"},[l("p",{staticClass:"custom-block-title"},[e._v("描述")]),e._v(" "),l("div",{staticClass:"language-js extra-class"},[l("pre",{pre:!0,attrs:{class:"language-js"}},[l("code",[l("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),l("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("f")]),e._v(" "),l("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),l("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),l("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("x")]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),l("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" x"),l("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),l("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" onceF "),l("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),l("span",{pre:!0,attrs:{class:"token function"}},[e._v("once")]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("f"),l("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),l("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//=> 3")]),e._v("\n"),l("span",{pre:!0,attrs:{class:"token function"}},[e._v("onceF")]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),l("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),l("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//=> 3")]),e._v("\n"),l("span",{pre:!0,attrs:{class:"token function"}},[e._v("onceF")]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),l("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),l("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])])]),e._v(" "),l("ul",[l("li",[e._v("实现一个merge\n")])])]),e._v(" "),l("li",[e._v("promise\n"),l("ul",[l("li",[e._v("实现一个简化的promise")]),e._v(" "),l("li",[e._v("实现promise.race ✔️\n")]),e._v(" "),l("li",[e._v("实现promise.all ✔️\n")]),e._v(" "),l("li",[e._v("实现promise.any\n")])])]),e._v(" "),l("li",[e._v("类型判断")]),e._v(" "),l("li",[e._v("类型转换\n"),l("ul",[l("li",[e._v("number与string")]),e._v(" "),l("li",[e._v("string与Array")])])]),e._v(" "),l("li",[e._v("括号匹配")]),e._v(" "),l("li",[e._v("随机数？优化？\n"),l("ul",[l("li",[e._v("写出区间[n,m]的随机数")])])]),e._v(" "),l("li",[e._v("生成一个随机字符串\n")]),e._v(" "),l("li",[e._v("给定一个数字，返回$开头并且带千分位符号的字符串")])]),e._v(" "),l("blockquote",[l("p",[e._v("123456 -> $123,456"),l("br"),e._v("\n12345678.21 -> $12,345,678.21")])]),e._v(" "),l("ul",[l("li",[e._v("实现大数相加")]),e._v(" "),l("li",[e._v("二维矩阵，90度旋转")]),e._v(" "),l("li",[e._v("实现一个函数，返回一个n,m的随机数")]),e._v(" "),l("li",[e._v("实现一个 async/await\n")]),e._v(" "),l("li",[e._v("用JS写一个发布订阅器 模拟vue中event的实现")]),e._v(" "),l("li",[e._v("实现isEqual\n")]),e._v(" "),l("li",[e._v("实现isEmpty")]),e._v(" "),l("li",[e._v("实现一个JSONP")]),e._v(" "),l("li",[e._v("实现set\n")]),e._v(" "),l("li",[e._v("reduce\n"),l("ul",[l("li",[e._v("用reduce实现map,输入:myMap(arr,cb)")])])]),e._v(" "),l("li",[e._v("实现一个compose函数")]),e._v(" "),l("li",[e._v("实现一个函数 isPlainObject 判断是否为纯对象?\n")]),e._v(" "),l("li",[e._v("JS 如何实现一个同步的 sleep 函数?\n")]),e._v(" "),l("li",[e._v("JS 如何实现一个 sleep/delay 函数?\n")]),e._v(" "),l("li",[e._v("实现一个函数用来解析 URL 的 querystring\n")]),e._v(" "),l("li",[e._v("如何实现一个 sample 函数，从数组中随机取一个元素?\n")]),e._v(" "),l("li",[e._v("如何过滤数组中的 falsy value？\n")]),e._v(" "),l("li",[e._v("实现二进制与十进制的互相转化的两个函数\n")]),e._v(" "),l("li",[e._v("实现扁平数据结构转Tree\n")])]),e._v(" "),l("h2",{attrs:{id:"leetcode"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#leetcode"}},[e._v("#")]),e._v(" leetcode")]),e._v(" "),l("ul",[l("li",[e._v("数组\n"),e._v(" "),l("ul",[l("li",[e._v("两个数组的交集")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/")])]),e._v(" "),l("ul",[l("li",[e._v("有两个升序数组，arr1 = [1,2,4,8]和arr2 = [1,2,4,5,6,8]，判断arr1的元素是否都存在arr2")]),e._v(" "),l("li",[e._v("合并两个有序数组 ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/merge-sorted-array/")])]),e._v(" "),l("ul",[l("li",[e._v("股票的最大利润")]),e._v(" "),l("li",[e._v("两数之和")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/two-sum/")])]),e._v(" "),l("ul",[l("li",[e._v("三数之和")]),e._v(" "),l("li",[e._v("移动0")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/move-zeroes/")])]),e._v(" "),l("ul",[l("li",[e._v("最大子数组和")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/maximum-subarray/")])]),e._v(" "),l("ul",[l("li",[e._v("移除元素")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/remove-element/")])]),e._v(" "),l("ul",[l("li",[e._v("找到所有数组中消失的数字 ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/")])]),e._v(" "),l("ul",[l("li",[e._v("搜索插入位置 ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/search-insert-position/")])])]),e._v(" "),l("li",[e._v("字符串\n"),e._v(" "),l("ul",[l("li",[e._v("连续字符")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/consecutive-characters/")])]),e._v(" "),l("ul",[l("li",[e._v("字符串相加")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/add-strings/\n")])]),e._v(" "),l("ul",[l("li",[e._v("切换大小写，字符串里大写变小写，小写变大写")]),e._v(" "),l("li",[e._v("实现toLowerCase")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/to-lower-case/\n")])]),e._v(" "),l("ul",[l("li",[e._v("旋转字符串")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/rotate-string/submissions/")])]),e._v(" "),l("ul",[l("li",[e._v("最后一个单词的长度")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/length-of-last-word/submissions/")])]),e._v(" "),l("ul",[l("li",[e._v("无重复字符的最长子串 ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/")])]),e._v(" "),l("ul",[l("li",[e._v("比较版本号 ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/compare-version-numbers/")])]),e._v(" "),l("ul",[l("li",[e._v("字母异位词分组 ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/group-anagrams/")])]),e._v(" "),l("ul",[l("li",[e._v("回文数")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/palindrome-number/")])]),e._v(" "),l("ul",[l("li",[e._v("最长回文子串 ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode.cn/problems/longest-palindromic-substring/solution/zui-chang-hui-wen-chuan-shi-yong-shuang-cc725/")])])]),e._v(" "),l("li",[e._v("链表\n"),e._v(" "),l("ul",[l("li",[e._v("反转链表 ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode.cn/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-by-leetcode-solution-d1k2/")])]),e._v(" "),l("ul",[l("li",[e._v("删除链表倒数第N个节点 ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/solution/dong-hua-yan-shi-kuai-man-zhi-zhen-19-sh-n9ih/")])]),e._v(" "),l("ul",[l("li",[e._v("合并两个有序链表 ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/merge-two-sorted-lists/")])]),e._v(" "),l("ul",[l("li",[e._v("环型链表 ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/linked-list-cycle/solution/yi-wen-gao-ding-chang-jian-de-lian-biao-wen-ti-h-2/")])])]),e._v(" "),l("li",[e._v("树\n"),e._v(" "),l("ul",[l("li",[e._v("DFS ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/solution/hua-jie-suan-fa-104-er-cha-shu-de-zui-da-shen-du-b/")])]),e._v(" "),l("ul",[l("li",[e._v("BFS ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/er-cha-shu-de-ceng-xu-bian-li-by-leetcode-solution/")])]),e._v(" "),l("ul",[l("li",[e._v("求一棵二叉搜索树第k小的值")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/")])]),e._v(" "),l("ul",[l("li",[e._v("验证一棵树是否为二叉搜索树")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/validate-binary-search-tree/\n")])]),e._v(" "),l("ul",[l("li",[e._v("二叉搜索树中的搜索")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/search-in-a-binary-search-tree/")])]),e._v(" "),l("ul",[l("li",[e._v("二叉树剪枝")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/binary-tree-pruning/solution/er-cha-shu-jian-zhi-by-leetcode/\n")])]),e._v(" "),l("ul",[l("li",[e._v("路径总和 ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/path-sum/")])]),e._v(" "),l("ul",[l("li",[e._v("求根节点到叶节点数字之和 ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode.cn/problems/sum-root-to-leaf-numbers/solution/qiu-gen-dao-xie-zi-jie-dian-shu-zi-zhi-he-by-leetc/")])]),e._v(" "),l("ul",[l("li",[e._v("最长同值路径")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/longest-univalue-path/")])]),e._v(" "),l("ul",[l("li",[e._v("n叉树的最大高度")])])]),e._v(" "),l("li",[e._v("排序\n"),l("ul",[l("li",[e._v("冒泡排序")]),e._v(" "),l("li",[e._v("快速排序")])])]),e._v(" "),l("li",[e._v("递归\n"),l("ul",[l("li",[e._v("实现一个fibonacci函数，输入数字n，输出fibonacci数列的第n项数字，并给该函数加入缓存功能\n")]),e._v(" "),l("li",[e._v("全排列 ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode.cn/problems/permutations/solution/chou-xiang-cheng-jue-ce-shu-yi-ge-pai-lie-jiu-xian/")])]),e._v(" "),l("ul",[l("li",[e._v("岛屿数量 ✔️")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode.cn/problems/number-of-islands/solution/js-dao-yu-shu-liang-by-bertil-n1m3/")])])]),e._v(" "),l("li",[e._v("动态规划\n"),l("ul",[l("li",[e._v("爬楼梯")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/climbing-stairs/\n")])]),e._v(" "),l("ul",[l("li",[e._v("最长上升序列")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/longest-increasing-subsequence/\n")])])]),e._v(" "),l("li",[e._v("其它\n"),l("ul",[l("li",[e._v("top k问题\n")]),e._v(" "),l("li",[e._v("输出100以内的质数")]),e._v(" "),l("li",[e._v("找出数组中比左边大比右边的小的元素\n")]),e._v(" "),l("li",[e._v("构造字典序尽可能小的字符串\n")]),e._v(" "),l("li",[e._v("如何实现高效的英文单词前缀匹配（只讲思路，不用写代码）\n")]),e._v(" "),l("li",[e._v("实现一个LRU (最近最少使用) 缓存机制")])]),e._v(" "),l("blockquote",[l("p",[e._v("https://leetcode-cn.com/problems/lru-cache/\n")])])])])])}),[],!1,null,null,null);l.default=_.exports}}]);